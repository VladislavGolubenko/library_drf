# Generated by Django 4.1 on 2022-09-05 16:18

import apps.acount.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='photos/%y/%m/%d', verbose_name='изображение')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='имя')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='фамилия')),
                ('role', models.CharField(choices=[(apps.acount.models.Role['USER'], apps.acount.models.Role['USER']), (apps.acount.models.Role['ADMIN'], apps.acount.models.Role['ADMIN']), (apps.acount.models.Role['SUBSCRIPTION'], apps.acount.models.Role['SUBSCRIPTION'])], default='user', max_length=100, verbose_name='роль')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='дата регистрации')),
                ('is_staff', models.BooleanField(default=False, verbose_name='персонал')),
                ('is_active', models.BooleanField(default=True, verbose_name='активный')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='админ')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователя',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('object', apps.acount.models.UserManager()),
            ],
        ),
    ]
